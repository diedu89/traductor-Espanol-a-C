
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.ArrayList;
import compilador.instrucciones.*;
import compilador.Ambito;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\002\005\000\002\002" +
    "\006\000\002\003\011\000\002\004\003\000\002\004\005" +
    "\000\002\005\006\000\002\040\002\000\002\041\002\000" +
    "\002\006\007\000\002\006\004\000\002\006\003\000\002" +
    "\011\004\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\010\003\000" +
    "\002\010\004\000\002\016\005\000\002\016\011\000\002" +
    "\016\013\000\002\007\005\000\002\020\003\000\002\020" +
    "\005\000\002\017\003\000\002\017\003\000\002\024\005" +
    "\000\002\021\003\000\002\021\005\000\002\025\003\000" +
    "\002\025\005\000\002\026\003\000\002\026\005\000\002" +
    "\026\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\003\000\002\030\003" +
    "\000\002\030\005\000\002\031\003\000\002\031\003\000" +
    "\002\032\003\000\002\032\005\000\002\033\003\000\002" +
    "\033\003\000\002\034\003\000\002\034\005\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\022\003\000\002\022\006\000\002\022\010\000" +
    "\002\012\006\000\002\013\010\000\002\042\002\000\002" +
    "\043\002\000\002\014\014\000\002\035\004\000\002\044" +
    "\002\000\002\015\007\000\002\036\004\000\002\037\003" +
    "\000\002\037\005\000\002\023\003\000\002\023\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\004\013\004\001\002\000\004\005\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\014\013\016\012\001\002\000\012\002\ufff6\014" +
    "\013\016\012\024\ufff6\001\002\000\006\002\000\024\205" +
    "\001\002\000\004\007\202\001\002\000\022\005\ufffa\016" +
    "\ufffa\020\ufffa\021\ufffa\022\ufffa\032\ufffa\035\ufffa\040\ufffa" +
    "\001\002\000\022\005\033\016\012\020\017\021\023\022" +
    "\025\032\032\035\034\040\037\001\002\000\034\005\uffec" +
    "\015\uffec\016\uffec\020\uffec\021\uffec\022\uffec\032\uffec\033" +
    "\uffec\034\uffec\035\uffec\037\uffec\040\uffec\041\uffec\001\002" +
    "\000\034\005\ufff2\015\ufff2\016\ufff2\020\ufff2\021\ufff2\022" +
    "\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\037\ufff2\040\ufff2" +
    "\041\ufff2\001\002\000\004\005\033\001\002\000\034\005" +
    "\uffed\015\uffed\016\uffed\020\uffed\021\uffed\022\uffed\032\uffed" +
    "\033\uffed\034\uffed\035\uffed\037\uffed\040\uffed\041\uffed\001" +
    "\002\000\034\005\uffef\015\uffef\016\uffef\020\uffef\021\uffef" +
    "\022\uffef\032\uffef\033\uffef\034\uffef\035\uffef\037\uffef\040" +
    "\uffef\041\uffef\001\002\000\024\005\033\015\ufff9\016\012" +
    "\020\017\021\023\022\025\032\032\035\034\040\037\001" +
    "\002\000\020\005\033\006\040\010\045\011\047\012\042" +
    "\031\056\047\043\001\002\000\004\042\166\001\002\000" +
    "\010\005\144\027\143\030\146\001\002\000\034\005\ufff3" +
    "\015\ufff3\016\ufff3\020\ufff3\021\ufff3\022\ufff3\032\ufff3\033" +
    "\ufff3\034\ufff3\035\ufff3\037\ufff3\040\ufff3\041\ufff3\001\002" +
    "\000\034\005\ufff0\015\ufff0\016\ufff0\020\ufff0\021\ufff0\022" +
    "\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\037\ufff0\040\ufff0" +
    "\041\ufff0\001\002\000\034\005\uffee\015\uffee\016\uffee\020" +
    "\uffee\021\uffee\022\uffee\032\uffee\033\uffee\034\uffee\035\uffee" +
    "\037\uffee\040\uffee\041\uffee\001\002\000\034\005\ufff4\015" +
    "\ufff4\016\ufff4\020\ufff4\021\ufff4\022\ufff4\032\ufff4\033\ufff4" +
    "\034\ufff4\035\ufff4\037\ufff4\040\ufff4\041\ufff4\001\002\000" +
    "\020\005\033\006\040\010\045\011\047\012\042\031\056" +
    "\047\043\001\002\000\072\005\uffc7\015\uffc7\016\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\032\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044" +
    "\uffc7\045\uffc7\046\uffc7\050\uffc7\051\127\053\uffc7\054\uffc7" +
    "\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\001\002\000" +
    "\004\005\uffc2\001\002\000\022\005\033\016\012\020\017" +
    "\021\023\022\025\032\032\035\034\040\037\001\002\000" +
    "\034\005\ufff1\015\ufff1\016\ufff1\020\ufff1\021\ufff1\022\ufff1" +
    "\032\ufff1\033\ufff1\034\ufff1\035\ufff1\037\ufff1\040\ufff1\041" +
    "\ufff1\001\002\000\020\005\033\006\040\010\045\011\047" +
    "\012\042\031\056\047\043\001\002\000\070\005\uffca\015" +
    "\uffca\016\uffca\020\uffca\021\uffca\022\uffca\023\uffca\032\uffca" +
    "\033\uffca\034\uffca\035\uffca\037\uffca\040\uffca\041\uffca\042" +
    "\uffca\043\uffca\044\uffca\045\uffca\046\uffca\050\uffca\053\uffca" +
    "\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca\001" +
    "\002\000\050\005\uffdf\015\uffdf\016\uffdf\020\uffdf\021\uffdf" +
    "\022\uffdf\023\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\037" +
    "\uffdf\040\uffdf\041\uffdf\042\070\050\uffdf\053\067\060\uffdf" +
    "\061\uffdf\001\002\000\070\005\uffc8\015\uffc8\016\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\032\uffc8\033\uffc8\034\uffc8" +
    "\035\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\046\uffc8\050\uffc8\053\uffc8\054\uffc8\055\uffc8" +
    "\056\uffc8\057\uffc8\060\uffc8\061\uffc8\001\002\000\020\005" +
    "\033\006\040\010\045\011\047\012\042\031\056\047\043" +
    "\001\002\000\060\005\uffdd\015\uffdd\016\uffdd\020\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd" +
    "\037\uffdd\040\uffdd\041\uffdd\042\uffdd\050\uffdd\053\uffdd\054" +
    "\075\055\072\056\074\057\073\060\uffdd\061\uffdd\001\002" +
    "\000\070\005\uffe4\015\uffe4\016\uffe4\020\uffe4\021\uffe4\022" +
    "\uffe4\023\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046" +
    "\uffe4\050\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4" +
    "\060\uffe4\061\uffe4\001\002\000\070\005\uffcd\015\uffcd\016" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043" +
    "\uffcd\044\uffcd\045\uffcd\046\uffcd\050\uffcd\053\uffcd\054\uffcd" +
    "\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\001\002\000" +
    "\070\005\uffe3\015\uffe3\016\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\037\uffe3\040" +
    "\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3" +
    "\050\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060" +
    "\uffe3\061\uffe3\001\002\000\044\005\uffe1\015\uffe1\016\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\023\uffe1\032\uffe1\033\uffe1\034" +
    "\uffe1\035\uffe1\037\uffe1\040\uffe1\041\uffe1\050\uffe1\060\uffe1" +
    "\061\065\001\002\000\070\005\uffcb\015\uffcb\016\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044" +
    "\uffcb\045\uffcb\046\uffcb\050\uffcb\053\uffcb\054\uffcb\055\uffcb" +
    "\056\uffcb\057\uffcb\060\uffcb\061\uffcb\001\002\000\070\005" +
    "\uffd5\015\uffd5\016\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\035\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\043\uffd5\044\uffd5\045\105\046\104\050\uffd5" +
    "\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061" +
    "\uffd5\001\002\000\070\005\uffd1\015\uffd1\016\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\032\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1" +
    "\045\uffd1\046\uffd1\050\uffd1\053\uffd1\054\uffd1\055\uffd1\056" +
    "\uffd1\057\uffd1\060\uffd1\061\uffd1\001\002\000\064\005\uffd6" +
    "\015\uffd6\016\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\032" +
    "\uffd6\033\uffd6\034\uffd6\035\uffd6\037\uffd6\040\uffd6\041\uffd6" +
    "\042\uffd6\043\101\044\100\050\uffd6\053\uffd6\054\uffd6\055" +
    "\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\001\002\000\024" +
    "\005\uffbe\016\uffbe\020\uffbe\021\uffbe\022\uffbe\032\uffbe\035" +
    "\uffbe\040\uffbe\060\057\001\002\000\070\005\uffc9\015\uffc9" +
    "\016\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\035\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9" +
    "\043\uffc9\044\uffc9\045\uffc9\046\uffc9\050\uffc9\053\uffc9\054" +
    "\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\001\002" +
    "\000\020\005\033\006\040\010\045\011\047\012\042\031" +
    "\056\047\043\001\002\000\022\005\033\016\012\020\017" +
    "\021\023\022\025\032\032\035\034\040\037\001\002\000" +
    "\024\005\033\016\012\020\017\021\023\022\025\032\032" +
    "\035\034\040\037\041\063\001\002\000\034\005\uffeb\015" +
    "\uffeb\016\uffeb\020\uffeb\021\uffeb\022\uffeb\032\uffeb\033\uffeb" +
    "\034\uffeb\035\uffeb\037\uffeb\040\uffeb\041\uffeb\001\002\000" +
    "\034\005\uffbd\015\uffbd\016\uffbd\020\uffbd\021\uffbd\022\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\035\uffbd\037\uffbd\040\uffbd\041" +
    "\uffbd\001\002\000\044\005\uffe0\015\uffe0\016\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\032\uffe0\033\uffe0\034\uffe0\035" +
    "\uffe0\037\uffe0\040\uffe0\041\uffe0\050\uffe0\060\uffe0\061\065" +
    "\001\002\000\020\005\033\006\040\010\045\011\047\012" +
    "\042\031\056\047\043\001\002\000\050\005\uffde\015\uffde" +
    "\016\uffde\020\uffde\021\uffde\022\uffde\023\uffde\032\uffde\033" +
    "\uffde\034\uffde\035\uffde\037\uffde\040\uffde\041\uffde\042\070" +
    "\050\uffde\053\067\060\uffde\061\uffde\001\002\000\020\005" +
    "\033\006\040\010\045\011\047\012\042\031\056\047\043" +
    "\001\002\000\020\005\033\006\040\010\045\011\047\012" +
    "\042\031\056\047\043\001\002\000\060\005\uffdc\015\uffdc" +
    "\016\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\050\uffdc\053\uffdc\054\075\055\072\056\074\057\073\060" +
    "\uffdc\061\uffdc\001\002\000\020\005\033\006\040\010\045" +
    "\011\047\012\042\031\056\047\043\001\002\000\020\005" +
    "\033\006\040\010\045\011\047\012\042\031\056\047\043" +
    "\001\002\000\020\005\033\006\040\010\045\011\047\012" +
    "\042\031\056\047\043\001\002\000\020\005\033\006\040" +
    "\010\045\011\047\012\042\031\056\047\043\001\002\000" +
    "\064\005\uffd9\015\uffd9\016\uffd9\020\uffd9\021\uffd9\022\uffd9" +
    "\023\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\037\uffd9\040" +
    "\uffd9\041\uffd9\042\uffd9\043\101\044\100\050\uffd9\053\uffd9" +
    "\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\001" +
    "\002\000\020\005\033\006\040\010\045\011\047\012\042" +
    "\031\056\047\043\001\002\000\020\005\uffd2\006\uffd2\010" +
    "\uffd2\011\uffd2\012\uffd2\031\uffd2\047\uffd2\001\002\000\020" +
    "\005\uffd3\006\uffd3\010\uffd3\011\uffd3\012\uffd3\031\uffd3\047" +
    "\uffd3\001\002\000\070\005\uffd4\015\uffd4\016\uffd4\020\uffd4" +
    "\021\uffd4\022\uffd4\023\uffd4\032\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4" +
    "\045\105\046\104\050\uffd4\053\uffd4\054\uffd4\055\uffd4\056" +
    "\uffd4\057\uffd4\060\uffd4\061\uffd4\001\002\000\020\005\033" +
    "\006\040\010\045\011\047\012\042\031\056\047\043\001" +
    "\002\000\020\005\uffce\006\uffce\010\uffce\011\uffce\012\uffce" +
    "\031\uffce\047\uffce\001\002\000\020\005\uffcf\006\uffcf\010" +
    "\uffcf\011\uffcf\012\uffcf\031\uffcf\047\uffcf\001\002\000\070" +
    "\005\uffd0\015\uffd0\016\uffd0\020\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\050" +
    "\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0" +
    "\061\uffd0\001\002\000\064\005\uffd7\015\uffd7\016\uffd7\020" +
    "\uffd7\021\uffd7\022\uffd7\023\uffd7\032\uffd7\033\uffd7\034\uffd7" +
    "\035\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\101\044" +
    "\100\050\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7" +
    "\060\uffd7\061\uffd7\001\002\000\064\005\uffd8\015\uffd8\016" +
    "\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\035\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043" +
    "\101\044\100\050\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8" +
    "\057\uffd8\060\uffd8\061\uffd8\001\002\000\064\005\uffda\015" +
    "\uffda\016\uffda\020\uffda\021\uffda\022\uffda\023\uffda\032\uffda" +
    "\033\uffda\034\uffda\035\uffda\037\uffda\040\uffda\041\uffda\042" +
    "\uffda\043\101\044\100\050\uffda\053\uffda\054\uffda\055\uffda" +
    "\056\uffda\057\uffda\060\uffda\061\uffda\001\002\000\060\005" +
    "\uffdb\015\uffdb\016\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\035\uffdb\037\uffdb\040\uffdb\041" +
    "\uffdb\042\uffdb\050\uffdb\053\uffdb\054\075\055\072\056\074" +
    "\057\073\060\uffdb\061\uffdb\001\002\000\006\050\114\060" +
    "\057\001\002\000\070\005\uffcc\015\uffcc\016\uffcc\020\uffcc" +
    "\021\uffcc\022\uffcc\023\uffcc\032\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\045\uffcc\046\uffcc\050\uffcc\053\uffcc\054\uffcc\055\uffcc\056" +
    "\uffcc\057\uffcc\060\uffcc\061\uffcc\001\002\000\034\005\ufff5" +
    "\015\ufff5\016\ufff5\020\ufff5\021\ufff5\022\ufff5\032\ufff5\033" +
    "\ufff5\034\ufff5\035\ufff5\037\ufff5\040\ufff5\041\ufff5\001\002" +
    "\000\004\005\117\001\002\000\004\042\uffc1\001\002\000" +
    "\004\042\121\001\002\000\004\010\122\001\002\000\004" +
    "\036\123\001\002\000\004\010\124\001\002\000\022\005" +
    "\033\016\012\020\017\021\023\022\025\032\032\035\034" +
    "\040\037\001\002\000\024\005\033\016\012\020\017\021" +
    "\023\022\025\032\032\035\034\037\126\040\037\001\002" +
    "\000\034\005\uffc0\015\uffc0\016\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\037\uffc0\040\uffc0" +
    "\041\uffc0\001\002\000\004\010\130\001\002\000\006\023" +
    "\131\052\132\001\002\000\004\010\133\001\002\000\070" +
    "\005\uffc6\015\uffc6\016\uffc6\020\uffc6\021\uffc6\022\uffc6\023" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\037\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\050" +
    "\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6" +
    "\061\uffc6\001\002\000\004\052\134\001\002\000\070\005" +
    "\uffc5\015\uffc5\016\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5" +
    "\032\uffc5\033\uffc5\034\uffc5\035\uffc5\037\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\050\uffc5" +
    "\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061" +
    "\uffc5\001\002\000\024\005\033\016\012\020\017\021\023" +
    "\022\025\032\032\035\034\040\037\060\057\001\002\000" +
    "\026\005\033\016\012\020\017\021\023\022\025\032\032" +
    "\033\137\034\140\035\034\040\037\001\002\000\022\005" +
    "\033\016\012\020\017\021\023\022\025\032\032\035\034" +
    "\040\037\001\002\000\034\005\uffc4\015\uffc4\016\uffc4\020" +
    "\uffc4\021\uffc4\022\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\001\002\000\024\005\033\016" +
    "\012\020\017\021\023\022\025\032\032\034\142\035\034" +
    "\040\037\001\002\000\034\005\uffc3\015\uffc3\016\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\037\uffc3\040\uffc3\041\uffc3\001\002\000\004\005\161\001" +
    "\002\000\006\004\uffe6\023\uffe6\001\002\000\006\004\157" +
    "\023\156\001\002\000\004\005\147\001\002\000\004\051" +
    "\150\001\002\000\004\010\151\001\002\000\004\023\152" +
    "\001\002\000\004\010\153\001\002\000\004\052\154\001" +
    "\002\000\004\004\155\001\002\000\034\005\uffe8\015\uffe8" +
    "\016\uffe8\020\uffe8\021\uffe8\022\uffe8\032\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\037\uffe8\040\uffe8\041\uffe8\001\002\000\004" +
    "\005\160\001\002\000\034\005\uffea\015\uffea\016\uffea\020" +
    "\uffea\021\uffea\022\uffea\032\uffea\033\uffea\034\uffea\035\uffea" +
    "\037\uffea\040\uffea\041\uffea\001\002\000\006\004\uffe5\023" +
    "\uffe5\001\002\000\004\051\162\001\002\000\004\010\163" +
    "\001\002\000\004\052\164\001\002\000\004\004\165\001" +
    "\002\000\034\005\uffe9\015\uffe9\016\uffe9\020\uffe9\021\uffe9" +
    "\022\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\037\uffe9\040" +
    "\uffe9\041\uffe9\001\002\000\020\005\033\006\040\010\045" +
    "\011\047\012\042\031\056\047\043\001\002\000\036\005" +
    "\uffe2\015\uffe2\016\uffe2\020\uffe2\021\uffe2\022\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\037\uffe2\040\uffe2\041\uffe2\060" +
    "\057\001\002\000\036\005\uffbc\015\uffbc\016\uffbc\020\uffbc" +
    "\021\uffbc\022\uffbc\023\172\032\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\001\002\000\040\005\uffbb" +
    "\015\uffbb\016\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\032" +
    "\uffbb\033\uffbb\034\uffbb\035\uffbb\037\uffbb\040\uffbb\041\uffbb" +
    "\060\057\001\002\000\020\005\033\006\040\010\045\011" +
    "\047\012\042\031\056\047\043\001\002\000\040\005\uffba" +
    "\015\uffba\016\uffba\020\uffba\021\uffba\022\uffba\023\uffba\032" +
    "\uffba\033\uffba\034\uffba\035\uffba\037\uffba\040\uffba\041\uffba" +
    "\060\057\001\002\000\004\015\175\001\002\000\006\002" +
    "\ufff8\024\ufff8\001\002\000\036\005\uffbf\015\uffbf\016\uffbf" +
    "\020\uffbf\021\uffbf\022\uffbf\023\200\032\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\037\uffbf\040\uffbf\041\uffbf\001\002\000\036" +
    "\005\uffb9\015\uffb9\016\uffb9\020\uffb9\021\uffb9\022\uffb9\023" +
    "\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\037\uffb9\040\uffb9" +
    "\041\uffb9\001\002\000\020\005\033\006\040\010\045\011" +
    "\047\012\042\031\056\047\043\001\002\000\040\005\uffb8" +
    "\015\uffb8\016\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\032" +
    "\uffb8\033\uffb8\034\uffb8\035\uffb8\037\uffb8\040\uffb8\041\uffb8" +
    "\060\057\001\002\000\004\017\203\001\002\000\030\002" +
    "\uffe7\005\uffe7\014\uffe7\016\uffe7\020\uffe7\021\uffe7\022\uffe7" +
    "\024\uffe7\032\uffe7\035\uffe7\040\uffe7\001\002\000\004\002" +
    "\uffff\001\002\000\004\005\206\001\002\000\004\025\207" +
    "\001\002\000\004\005\210\001\002\000\004\047\220\001" +
    "\002\000\006\023\ufffd\026\ufffd\001\002\000\006\023\213" +
    "\026\214\001\002\000\004\005\210\001\002\000\004\004" +
    "\215\001\002\000\006\014\013\016\012\001\002\000\004" +
    "\002\ufffe\001\002\000\006\023\ufffc\026\ufffc\001\002\000" +
    "\004\004\221\001\002\000\004\050\222\001\002\000\006" +
    "\023\ufffb\026\ufffb\001\002\000\006\002\ufff7\024\ufff7\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\010\007\007" +
    "\001\001\000\006\006\222\007\007\001\001\000\004\003" +
    "\203\001\001\000\002\001\001\000\004\040\013\001\001" +
    "\000\032\007\034\010\021\011\014\012\025\013\015\014" +
    "\035\015\026\016\017\022\023\024\030\035\020\036\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\176\023\175\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\007\034\011\061\012\025\013\015\014\035\015" +
    "\026\016\017\022\023\024\030\035\020\036\027\041\173" +
    "\001\001\000\026\017\045\021\170\022\050\025\047\026" +
    "\040\027\043\030\053\032\051\034\052\037\167\001\001" +
    "\000\002\001\001\000\004\020\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\017\045\021\134\022\050\025\047\026\040\027" +
    "\043\030\053\032\051\034\052\001\001\000\002\001\001" +
    "\000\004\042\115\001\001\000\030\007\034\011\114\012" +
    "\025\013\015\014\035\015\026\016\017\022\023\024\030" +
    "\035\020\036\027\001\001\000\002\001\001\000\024\017" +
    "\045\021\054\022\050\025\047\026\040\027\043\030\053" +
    "\032\051\034\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\017\045\021\112\022\050" +
    "\025\047\026\040\027\043\030\053\032\051\034\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\102\001\001\000\002\001\001\000\004\031\076" +
    "\001\001\000\004\044\057\001\001\000\002\001\001\000" +
    "\022\017\045\022\050\025\063\026\040\027\043\030\053" +
    "\032\051\034\052\001\001\000\032\007\034\010\060\011" +
    "\014\012\025\013\015\014\035\015\026\016\017\022\023" +
    "\024\030\035\020\036\027\001\001\000\030\007\034\011" +
    "\061\012\025\013\015\014\035\015\026\016\017\022\023" +
    "\024\030\035\020\036\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\017\045\022\050" +
    "\026\065\027\043\030\053\032\051\034\052\001\001\000" +
    "\002\001\001\000\016\017\045\022\050\027\111\030\053" +
    "\032\051\034\052\001\001\000\016\017\045\022\050\027" +
    "\070\030\053\032\051\034\052\001\001\000\002\001\001" +
    "\000\014\017\045\022\050\030\110\032\051\034\052\001" +
    "\001\000\014\017\045\022\050\030\107\032\051\034\052" +
    "\001\001\000\014\017\045\022\050\030\106\032\051\034" +
    "\052\001\001\000\014\017\045\022\050\030\075\032\051" +
    "\034\052\001\001\000\004\031\076\001\001\000\012\017" +
    "\045\022\050\032\101\034\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\102\001\001\000\010\017" +
    "\045\022\050\034\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\076\001\001\000" +
    "\004\031\076\001\001\000\004\031\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\007\034\010\124\011\014\012\025\013\015" +
    "\014\035\015\026\016\017\022\023\024\030\035\020\036" +
    "\027\001\001\000\030\007\034\011\061\012\025\013\015" +
    "\014\035\015\026\016\017\022\023\024\030\035\020\036" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\007\034\010\135\011\014" +
    "\012\025\013\015\014\035\015\026\016\017\022\023\024" +
    "\030\035\020\036\027\001\001\000\030\007\034\011\061" +
    "\012\025\013\015\014\035\015\026\016\017\022\023\024" +
    "\030\035\020\036\027\001\001\000\032\007\034\010\140" +
    "\011\014\012\025\013\015\014\035\015\026\016\017\022" +
    "\023\024\030\035\020\036\027\001\001\000\002\001\001" +
    "\000\030\007\034\011\061\012\025\013\015\014\035\015" +
    "\026\016\017\022\023\024\030\035\020\036\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\017\045\021\166\022\050\025\047\026" +
    "\040\027\043\030\053\032\051\034\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\017" +
    "\045\021\172\022\050\025\047\026\040\027\043\030\053" +
    "\032\051\034\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\017\045\021\200\022\050\025\047\026\040\027" +
    "\043\030\053\032\051\034\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\211\005\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\216\001\001\000\002\001\001\000\006" +
    "\006\215\007\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	ambito = new Ambito(null);

    }



	public boolean correcto=true;
	private SintacticoListener listener = null;
	private String tipo = "";
   private Ambito ambito;

	public void addListener(SintacticoListener listener){
		this.listener = listener;
	}

	public void syntax_error(Symbol cur_token){
		correcto = false;
		listener.errorSintaxis(cur_token, symbl_name_from_id(cur_token.sym));
		System.err.println("Error con token: " + symbl_name_from_id(cur_token.sym));
	}

	/* Reporte de error encontrado. */
	public void report_error(String message, Object info) {
	  StringBuilder m = new StringBuilder("Error");
	  if (info instanceof java_cup.runtime.Symbol) {
	      java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
	      if (s.left >= 0) {                
	          m.append(" in line "+(s.left+1));
	          if (s.right >= 0)
	              m.append(", column "+(s.right+1));
	      }
	  }
	  m.append(" : "+message);
	  System.err.println(m);
	  System.err.println(info);
	}

	/* Cuando se encuentra un error de donde el sistema no puede
	  recuperarse, se lanza un error fatal. Se despliega el mensaje
	  de error y se finaliza la ejecucion. */
	public void report_fatal_error(String message, Object info) {
	  report_error(message, info);
	}

	private Identificador buscarId(String identificador, String tipo, Boolean propagar) throws SemanticException{
		Identificador id = ambito.get(identificador, propagar);
		if(id == null){
			throw new SemanticException("La variable o funcion " + identificador + " no esta declarada", this.cur_token);
		}

		if( !tipo.equals("") && !( id.tipoId.equals(tipo) ) ){
			throw new SemanticException("El identificador corresponde a un dato " + id.tipoId, this.cur_token);
		}

		return id;
	}

	private Identificador buscarId(String identificador, int fila, Boolean propagar) throws SemanticException{
		Identificador id = buscarId(identificador, "arreglo", propagar);

		if(id.filas <= fila)
			throw new SemanticException("Indice " + fila + " fuera del limite del arreglo " + id.identificador + ", dimension: " + id.filas, this.cur_token);

		return id;
	}

	private Identificador buscarId(String identificador, int fila, int columna, Boolean propagar) throws SemanticException{
		Identificador id = buscarId(identificador, "matriz", propagar);

		if(id.filas <= fila)
			throw new SemanticException("Indice " + fila + " fuera del limite de la matriz " + id.identificador + ", dimension: " + id.filas, this.cur_token);

		if(id.filas <= fila)
			throw new SemanticException("Indice " + columna + " fuera del limite de la matriz " + id.identificador + ", dimension: " + id.columnas, this.cur_token);

		return id;
	}


	private Expresion expresionAritmetica(Expresion op1, String operador, Expresion op2) throws SemanticException {
	  if(!(op1.tipo.equals("FLOTANTE") || op1.tipo.equals("ENTERO")))
	      throw new SemanticException("El operador " + operador + " no puede aplicarse a un tipo " + op1.tipo , this.cur_token);
	  if(!(op2.tipo.equals("FLOTANTE") || op2.tipo.equals("ENTERO")))
	      throw new SemanticException("El operador " + operador + " no puede aplicarse a un tipo " + op2.tipo , this.cur_token);
	  
	  return new Expresion(op1.valor + " " + operador + " " + op2.valor, (op1.tipo.equals("FLOTANTE") || op2.tipo.equals("FLOTANTE")) ? "FLOTANTE" : "ENTERO");
	}

	private Expresion expresionCondicional(Expresion op1, String operador, Expresion op2) throws SemanticException {
	  if( !(op1.tipo.equals("BOOLEANO") && op2.tipo.equals("BOOLEANO")) )
	      throw new SemanticException("El operador " + operador + " no puede aplicarse a un tipo de dato CADENA" , this.cur_token);
	  
	  return new Expresion(op1.valor + " " + operador + " " + op2.valor, "BOOLEANO");
	}

	private Expresion expresionRelacional(Expresion op1, String operador, Expresion op2) throws SemanticException{
	  if(op1.tipo.equals("CADENA") || op2.tipo.equals("CADENA"))
	      throw new SemanticException("El operador " + operador + " no puede aplicarse a un tipo de dato CADENA" , this.cur_token);
	  if(
	      (op1.tipo.equals("BOOLEANO") && !op2.tipo.equals("BOOLEANO")) || 
	      (!op1.tipo.equals("BOOLEANO") && op2.tipo.equals("BOOLEANO"))
	    )
	      throw new SemanticException("No se puede comparar un tipo de dato " + op1.tipo + " y tipo de dato " + op2.tipo , this.cur_token);
	  
	  return new Expresion(op1.valor + " " + operador + " " + op2.valor, "BOOLEANO");
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= PROGRAMA_K IDENTIFICADOR BLOQUE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Funcion("main", (Bloque) b, "void"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= PROGRAMA_K IDENTIFICADOR BLOQUE MODULO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MODULO ::= MODULO_K IDENTIFICADOR RECIBE ARGUMENTOS DEVUELVE TIPO BLOQUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MODULO",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ARGUMENTOS ::= ARGUMENTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ARGUMENTOS ::= ARGUMENTOS COMA ARGUMENTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ARGUMENTO ::= IDENTIFICADOR PAR_IZQ TIPO PAR_DER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;
 ambito = new Ambito(ambito); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 RESULT = new Bloque((ArrayList<Nodo>) ins); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$1",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BLOQUE ::= INICIO_BLOQUE NT$0 INSTRUCCIONES NT$1 FIN_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 ambito = ambito.padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BLOQUE ::= COMENTARIO BLOQUE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = b; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BLOQUE ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= COMENTARIO INSTRUCCION 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = i; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= ASIGNACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= IF 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = i; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= IFELSE 
            {
              Object RESULT =null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ie = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = ie; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= FOR 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = f; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= MIENTRAS_T 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = m; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= LECTURA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = l; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= DESPLIEGUE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = d; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= DECLARACION 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = d; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
								ArrayList<Nodo> nodos = new ArrayList<Nodo>();
								nodos.add((Nodo) i);
								RESULT = nodos;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
								((ArrayList<Nodo>) ins).add((Nodo) i);
								RESULT = ins;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= DECLARAR IDENTIFICADORES TIPO 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  
	      					for(String variableName: (ArrayList<String>) ids){
									if(ambito.get(variableName, false) != null)
										throw new SemanticException("Variable " + ( variableName ) + " ya fue declarada en el ambito actual" , this.parser.cur_token);

	      						ambito.put(variableName, new Identificador(variableName, (String) t));
	      					}

	      					RESULT = new Declaracion((String) t, (ArrayList<String>) ids);
	      				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= DECLARAR VECTOR IDENTIFICADOR CORCHETE_IZQ ENTERO CORCHETE_DER TIPO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								if(ambito.get((String) id, false) != null)
									throw new SemanticException("Variable " + ( (String) id ) + " ya fue declarada en el ambito actual" , this.parser.cur_token);

								ambito.put((String) id, new Identificador((String) id, (String) t, (int) f) );

								RESULT = new Declaracion((String) t, (String) id + "[" + String.valueOf(f) + "]");
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= DECLARAR MATRIZ IDENTIFICADOR CORCHETE_IZQ ENTERO COMA ENTERO CORCHETE_DER TIPO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								if(ambito.get((String) id, false) != null)
									throw new SemanticException("Variable " + ( (String) id ) + " ya fue declarada en el ambito actual" , this.parser.cur_token);

								ambito.put((String) id, new Identificador((String) id, (String) t, (int) f, (int) c) );

								RESULT = new Declaracion((String) t, (String) id + "[" + String.valueOf(f) + "][" + String.valueOf(c) + "]");
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // COMENTARIO ::= INICIO_COMENTARIO CONT_COMENT FIN_COMENTARIO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IDENTIFICADORES ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
								ArrayList<String> identificadores = new ArrayList<String>();
								identificadores.add((String) id);
								RESULT = identificadores;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IDENTIFICADORES ::= IDENTIFICADORES COMA IDENTIFICADOR 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
								((ArrayList<String>) ids).add((String) id);
								RESULT = ids;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONSTANTE_NUM ::= ENTERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Expresion(String.valueOf(e), "ENTERO"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONSTANTE_NUM",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONSTANTE_NUM ::= FLOTANTE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Expresion(String.valueOf(f), "FLOTANTE"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONSTANTE_NUM",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASIGNACION ::= VARIABLE OP_IGUAL EXPRESION 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								Expresion var = (Expresion) v;
								Expresion exp = (Expresion) e;

								if(!(var.tipo.equals("FLOTANTE") || var.tipo.equals("ENTERO")) &&
									!(var.tipo.equals("FLOTANTE") || var.tipo.equals("ENTERO")) &&
									!var.tipo.equals(exp.tipo) )
									throw new SemanticException("No se puede asignar a una variable de tipo " + var.tipo + " una expresion de tipo " + exp.tipo , this.parser.cur_token);

								RESULT = new Asignacion(var, exp);
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= CONDICIONAL_Y 
            {
              Object RESULT =null;
		int cyleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cyright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object cy = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = (Expresion) cy; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= EXPRESION OR CONDICIONAL_Y 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cyleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cyright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object cy = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = expresionCondicional( (Expresion) e, "||", (Expresion) cy); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONDICIONAL_Y ::= EXP_IGUALDAD 
            {
              Object RESULT =null;
		int eileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = (Expresion) ei; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_Y",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONDICIONAL_Y ::= CONDICIONAL_Y AND EXP_IGUALDAD 
            {
              Object RESULT =null;
		int cyleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cyright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object cy = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = expresionCondicional( (Expresion) cy, "&&", (Expresion) ei); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_Y",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXP_IGUALDAD ::= EXP_RELACIONAL 
            {
              Object RESULT =null;
		int erleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = (Expresion) er; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_IGUALDAD",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXP_IGUALDAD ::= EXP_IGUALDAD OP_IGUAL EXP_RELACIONAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int erleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = expresionRelacional((Expresion) e, "==", (Expresion) er); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_IGUALDAD",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXP_IGUALDAD ::= EXP_IGUALDAD COMP_DIFERENTE EXP_RELACIONAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int erleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = expresionRelacional((Expresion) e, "!=", (Expresion) er); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_IGUALDAD",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP_RELACIONAL ::= EXP_RELACIONAL COMP_MENOR EXP_ADICION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = expresionRelacional((Expresion) e, "<" , (Expresion) ea); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP_RELACIONAL ::= EXP_RELACIONAL COMP_MAYOR EXP_ADICION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = expresionRelacional((Expresion) e, ">" , (Expresion) ea); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP_RELACIONAL ::= EXP_RELACIONAL COMP_MENOR_IGUAL EXP_ADICION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = expresionRelacional((Expresion) e, "<=", (Expresion) ea); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP_RELACIONAL ::= EXP_RELACIONAL COMP_MAYOR_IGUAL EXP_ADICION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = expresionRelacional((Expresion) e, ">=", (Expresion) ea); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP_RELACIONAL ::= EXP_ADICION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = (Expresion) e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP_ADICION ::= EXP_MUL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = (Expresion) e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_ADICION",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP_ADICION ::= EXP_ADICION OP_ADICION EXP_MUL 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int emleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int emright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object em = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = expresionAritmetica( (Expresion) ea, (String) op, (Expresion)em); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_ADICION",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OP_ADICION ::= OP_MAS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = "+"; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ADICION",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OP_ADICION ::= OP_MENOS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = "-"; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ADICION",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP_MUL ::= EXP_PRIMARIA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = (Expresion) e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_MUL",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP_MUL ::= EXP_MUL OP_MUL EXP_PRIMARIA 
            {
              Object RESULT =null;
		int emleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int emright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object em = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int epleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int epright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = expresionAritmetica( (Expresion) em, (String) op, (Expresion)ep); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_MUL",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OP_MUL ::= OP_POR 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = "*"; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_MUL",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OP_MUL ::= OP_DIV 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = "/"; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_MUL",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP_PRIMARIA ::= CONSTANTE_NUM 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = (Expresion) c; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_PRIMARIA",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP_PRIMARIA ::= PAR_IZQ EXPRESION PAR_DER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new Expresion("( " + ((Expresion) e).valor + " )", ((Expresion) e).tipo) ; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_PRIMARIA",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP_PRIMARIA ::= VARIABLE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = (Expresion) var; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_PRIMARIA",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP_PRIMARIA ::= CADENA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Expresion((String)c,"CADENA"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_PRIMARIA",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP_PRIMARIA ::= CARACTER 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Expresion((String)c,"CARACTER"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_PRIMARIA",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP_PRIMARIA ::= BOOLEANO 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Expresion((b)?"1":"0","BOOLEANO"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_PRIMARIA",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VARIABLE ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
								Identificador identificador = buscarId((String) id, "primitivo", true);
								RESULT = new Expresion((String) id, identificador.tipoDato); 
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VARIABLE ::= IDENTIFICADOR CORCHETE_IZQ ENTERO CORCHETE_DER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 
								Identificador identificador = buscarId((String) id, i, true);
								RESULT = new Expresion((String) id + "[" + String.valueOf(i) + "]", identificador.tipoDato); 
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VARIABLE ::= IDENTIFICADOR CORCHETE_IZQ ENTERO COMA ENTERO CORCHETE_DER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer j = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 
								Identificador identificador = buscarId((String) id, i, j, true);
								RESULT = new Expresion((String) id + "[" + String.valueOf(i) + "]" + "[" + String.valueOf(j) + "]", identificador.tipoDato); 
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IF ::= SI EXPRESION INSTRUCCIONES FIN_SI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 
								if( ! ((Expresion)e).tipo.equals("BOOLEANO") )
 									throw new SemanticException("Se esperaba una expresion condicional o valor booleano", this.parser.cur_token);
 									
								RESULT = new Si( (Expresion) e, (ArrayList<Nodo>) ins); 
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IF",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IFELSE ::= SI EXPRESION INSTRUCCIONES SINO INSTRUCCIONES FIN_SI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int ins_elseleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ins_elseright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object ins_else = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 
								if( ! ((Expresion)e).tipo.equals("BOOLEANO") )
 									throw new SemanticException("Se esperaba una expresion condicional o valor booleano", this.parser.cur_token);

								RESULT = new SiSiNo( (Expresion) e, (ArrayList<Nodo>) ins, (ArrayList<Nodo>) ins_else ); 
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IFELSE",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$2 ::= 
            {
              Object RESULT =null;
 ambito = new Ambito(ambito); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$2",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

								ambito.put((String) id , new Identificador((String) id, "ENTERO"));
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$3",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FOR ::= DESDE NT$2 IDENTIFICADOR NT$3 OP_IGUAL ENTERO HASTA ENTERO INSTRUCCIONES FIN_DESDE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int desdeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int desderight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Integer desde = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int hastaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int hastaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer hasta = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 
								ambito = ambito.padre; 
								RESULT = new Desde((ArrayList<Nodo>) ins, (String) id, (int) desde, (int) hasta);
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LECTURA ::= LEER VARIABLES 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
								RESULT = new Lectura((ArrayList<Expresion>) vars);
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LECTURA",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$4 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 
								if( ! ((Expresion)e).tipo.equals("BOOLEANO") )
 									throw new SemanticException("Se esperaba una expresion condicional o valor booleano", this.parser.cur_token);

								ambito = new Ambito(ambito); 
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$4",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // MIENTRAS_T ::= MIENTRAS EXPRESION NT$4 INSTRUCCIONES FIN_MIENTRAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
								ambito = ambito.padre;
								RESULT = new Mientras( (ArrayList<Nodo>) ins, (Expresion) e);
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS_T",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DESPLIEGUE ::= DESPLEGAR EXPRESIONES 
            {
              Object RESULT =null;
		int expsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object exps = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								RESULT = new Despliegue((ArrayList<Expresion>)exps);
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DESPLIEGUE",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESIONES ::= EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
								ArrayList<Expresion> exps = new ArrayList<Expresion>();
								exps.add((Expresion)e);
								RESULT =  exps;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESIONES ::= EXPRESIONES COMA EXPRESION 
            {
              Object RESULT =null;
		int expsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object exps = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								((ArrayList<Expresion>) exps).add((Expresion)v);
								RESULT = exps;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VARIABLES ::= VARIABLE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
								ArrayList<Expresion> exps = new ArrayList<Expresion>();
								exps.add((Expresion)e);
								RESULT =  exps;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VARIABLES ::= VARIABLES COMA EXPRESION 
            {
              Object RESULT =null;
		int expsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object exps = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								((ArrayList<Expresion>) exps).add((Expresion)v);
								RESULT = exps;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}

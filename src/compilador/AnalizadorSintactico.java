
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\005\000\002\002" +
    "\006\000\002\003\011\000\002\004\003\000\002\004\005" +
    "\000\002\005\006\000\002\006\005\000\002\006\004\000" +
    "\002\006\003\000\002\011\004\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\010\003\000\002\010\004\000\002\016\005\000" +
    "\002\016\011\000\002\016\011\000\002\007\005\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\021\003\000\002\021\005\000\002\020\003" +
    "\000\002\020\003\000\002\024\005\000\002\022\003\000" +
    "\002\023\003\000\002\023\005\000\002\025\003\000\002" +
    "\025\005\000\002\026\003\000\002\026\005\000\002\026" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\003\000\002\030\003\000" +
    "\002\030\005\000\002\031\003\000\002\031\003\000\002" +
    "\032\003\000\002\032\005\000\002\033\003\000\002\033" +
    "\003\000\002\034\003\000\002\034\005\000\002\034\003" +
    "\000\002\013\010\000\002\012\006\000\002\014\012\000" +
    "\002\035\004\000\002\015\006\000\002\036\004\000\002" +
    "\036\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\004\013\004\001\002\000\004\005\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\014\013\016\012\001\002\000\012\002\ufff8\014" +
    "\013\016\012\024\ufff8\001\002\000\006\002\000\024\164" +
    "\001\002\000\004\007\161\001\002\000\022\005\031\016" +
    "\012\020\016\021\022\022\024\032\030\035\032\040\035" +
    "\001\002\000\034\005\uffee\015\uffee\016\uffee\020\uffee\021" +
    "\uffee\022\uffee\032\uffee\033\uffee\034\uffee\035\uffee\037\uffee" +
    "\040\uffee\041\uffee\001\002\000\034\005\ufff4\015\ufff4\016" +
    "\ufff4\020\ufff4\021\ufff4\022\ufff4\032\ufff4\033\ufff4\034\ufff4" +
    "\035\ufff4\037\ufff4\040\ufff4\041\ufff4\001\002\000\004\005" +
    "\131\001\002\000\034\005\uffef\015\uffef\016\uffef\020\uffef" +
    "\021\uffef\022\uffef\032\uffef\033\uffef\034\uffef\035\uffef\037" +
    "\uffef\040\uffef\041\uffef\001\002\000\034\005\ufff1\015\ufff1" +
    "\016\ufff1\020\ufff1\021\ufff1\022\ufff1\032\ufff1\033\ufff1\034" +
    "\ufff1\035\ufff1\037\ufff1\040\ufff1\041\ufff1\001\002\000\024" +
    "\005\031\015\157\016\012\020\016\021\022\022\024\032" +
    "\030\035\032\040\035\001\002\000\016\005\131\006\151" +
    "\010\041\011\043\012\153\031\156\001\002\000\034\005" +
    "\ufff5\015\ufff5\016\ufff5\020\ufff5\021\ufff5\022\ufff5\032\ufff5" +
    "\033\ufff5\034\ufff5\035\ufff5\037\ufff5\040\ufff5\041\ufff5\001" +
    "\002\000\010\005\131\027\130\030\133\001\002\000\034" +
    "\005\ufff2\015\ufff2\016\ufff2\020\ufff2\021\ufff2\022\ufff2\032" +
    "\ufff2\033\ufff2\034\ufff2\035\ufff2\037\ufff2\040\ufff2\041\ufff2" +
    "\001\002\000\034\005\ufff0\015\ufff0\016\ufff0\020\ufff0\021" +
    "\ufff0\022\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\037\ufff0" +
    "\040\ufff0\041\ufff0\001\002\000\034\005\ufff6\015\ufff6\016" +
    "\ufff6\020\ufff6\021\ufff6\022\ufff6\032\ufff6\033\ufff6\034\ufff6" +
    "\035\ufff6\037\ufff6\040\ufff6\041\ufff6\001\002\000\012\005" +
    "\050\010\041\011\043\047\037\001\002\000\004\042\120" +
    "\001\002\000\004\005\111\001\002\000\022\005\031\016" +
    "\012\020\016\021\022\022\024\032\030\035\032\040\035" +
    "\001\002\000\034\005\ufff3\015\ufff3\016\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\037\ufff3" +
    "\040\ufff3\041\ufff3\001\002\000\012\005\050\010\041\011" +
    "\043\047\037\001\002\000\046\005\uffdc\015\uffdc\016\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\032\uffdc\033\uffdc\034\uffdc\035" +
    "\uffdc\037\uffdc\040\uffdc\041\uffdc\042\062\050\uffdc\053\061" +
    "\060\uffdc\061\uffdc\001\002\000\012\005\050\010\041\011" +
    "\043\047\037\001\002\000\056\005\uffda\015\uffda\016\uffda" +
    "\020\uffda\021\uffda\022\uffda\032\uffda\033\uffda\034\uffda\035" +
    "\uffda\037\uffda\040\uffda\041\uffda\042\uffda\050\uffda\053\uffda" +
    "\054\067\055\064\056\066\057\065\060\uffda\061\uffda\001" +
    "\002\000\066\005\uffe2\015\uffe2\016\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\037\uffe2\040" +
    "\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2" +
    "\050\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060" +
    "\uffe2\061\uffe2\001\002\000\066\005\uffca\015\uffca\016\uffca" +
    "\020\uffca\021\uffca\022\uffca\032\uffca\033\uffca\034\uffca\035" +
    "\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca" +
    "\045\uffca\046\uffca\050\uffca\053\uffca\054\uffca\055\uffca\056" +
    "\uffca\057\uffca\060\uffca\061\uffca\001\002\000\066\005\uffe1" +
    "\015\uffe1\016\uffe1\020\uffe1\021\uffe1\022\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1" +
    "\043\uffe1\044\uffe1\045\uffe1\046\uffe1\050\uffe1\053\uffe1\054" +
    "\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\001\002" +
    "\000\042\005\uffde\015\uffde\016\uffde\020\uffde\021\uffde\022" +
    "\uffde\032\uffde\033\uffde\034\uffde\035\uffde\037\uffde\040\uffde" +
    "\041\uffde\050\uffde\060\uffde\061\057\001\002\000\066\005" +
    "\uffd2\015\uffd2\016\uffd2\020\uffd2\021\uffd2\022\uffd2\032\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\037\uffd2\040\uffd2\041\uffd2\042" +
    "\uffd2\043\uffd2\044\uffd2\045\077\046\076\050\uffd2\053\uffd2" +
    "\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\001" +
    "\002\000\066\005\uffce\015\uffce\016\uffce\020\uffce\021\uffce" +
    "\022\uffce\032\uffce\033\uffce\034\uffce\035\uffce\037\uffce\040" +
    "\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce" +
    "\050\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060" +
    "\uffce\061\uffce\001\002\000\062\005\uffd3\015\uffd3\016\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\032\uffd3\033\uffd3\034\uffd3\035" +
    "\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\073\044\072" +
    "\050\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060" +
    "\uffd3\061\uffd3\001\002\000\066\005\uffc8\015\uffc8\016\uffc8" +
    "\020\uffc8\021\uffc8\022\uffc8\032\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8" +
    "\045\uffc8\046\uffc8\050\uffc8\053\uffc8\054\uffc8\055\uffc8\056" +
    "\uffc8\057\uffc8\060\uffc8\061\uffc8\001\002\000\024\005\031" +
    "\016\012\020\016\021\022\022\024\032\030\035\032\040" +
    "\035\060\052\001\002\000\012\005\050\010\041\011\043" +
    "\047\037\001\002\000\024\005\031\016\012\020\016\021" +
    "\022\022\024\032\030\035\032\040\035\041\055\001\002" +
    "\000\034\005\uffed\015\uffed\016\uffed\020\uffed\021\uffed\022" +
    "\uffed\032\uffed\033\uffed\034\uffed\035\uffed\037\uffed\040\uffed" +
    "\041\uffed\001\002\000\034\005\uffc3\015\uffc3\016\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\037\uffc3\040\uffc3\041\uffc3\001\002\000\042\005\uffdd\015" +
    "\uffdd\016\uffdd\020\uffdd\021\uffdd\022\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\035\uffdd\037\uffdd\040\uffdd\041\uffdd\050\uffdd\060" +
    "\uffdd\061\057\001\002\000\012\005\050\010\041\011\043" +
    "\047\037\001\002\000\046\005\uffdb\015\uffdb\016\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\042\062\050\uffdb\053\061\060" +
    "\uffdb\061\uffdb\001\002\000\012\005\050\010\041\011\043" +
    "\047\037\001\002\000\012\005\050\010\041\011\043\047" +
    "\037\001\002\000\056\005\uffd9\015\uffd9\016\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\050\uffd9\053\uffd9\054\067" +
    "\055\064\056\066\057\065\060\uffd9\061\uffd9\001\002\000" +
    "\012\005\050\010\041\011\043\047\037\001\002\000\012" +
    "\005\050\010\041\011\043\047\037\001\002\000\012\005" +
    "\050\010\041\011\043\047\037\001\002\000\012\005\050" +
    "\010\041\011\043\047\037\001\002\000\062\005\uffd6\015" +
    "\uffd6\016\uffd6\020\uffd6\021\uffd6\022\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043" +
    "\073\044\072\050\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6" +
    "\057\uffd6\060\uffd6\061\uffd6\001\002\000\012\005\050\010" +
    "\041\011\043\047\037\001\002\000\012\005\uffcf\010\uffcf" +
    "\011\uffcf\047\uffcf\001\002\000\012\005\uffd0\010\uffd0\011" +
    "\uffd0\047\uffd0\001\002\000\066\005\uffd1\015\uffd1\016\uffd1" +
    "\020\uffd1\021\uffd1\022\uffd1\032\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1" +
    "\045\077\046\076\050\uffd1\053\uffd1\054\uffd1\055\uffd1\056" +
    "\uffd1\057\uffd1\060\uffd1\061\uffd1\001\002\000\012\005\050" +
    "\010\041\011\043\047\037\001\002\000\012\005\uffcb\010" +
    "\uffcb\011\uffcb\047\uffcb\001\002\000\012\005\uffcc\010\uffcc" +
    "\011\uffcc\047\uffcc\001\002\000\066\005\uffcd\015\uffcd\016" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\032\uffcd\033\uffcd\034\uffcd" +
    "\035\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044" +
    "\uffcd\045\uffcd\046\uffcd\050\uffcd\053\uffcd\054\uffcd\055\uffcd" +
    "\056\uffcd\057\uffcd\060\uffcd\061\uffcd\001\002\000\062\005" +
    "\uffd4\015\uffd4\016\uffd4\020\uffd4\021\uffd4\022\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\037\uffd4\040\uffd4\041\uffd4\042" +
    "\uffd4\043\073\044\072\050\uffd4\053\uffd4\054\uffd4\055\uffd4" +
    "\056\uffd4\057\uffd4\060\uffd4\061\uffd4\001\002\000\062\005" +
    "\uffd5\015\uffd5\016\uffd5\020\uffd5\021\uffd5\022\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\037\uffd5\040\uffd5\041\uffd5\042" +
    "\uffd5\043\073\044\072\050\uffd5\053\uffd5\054\uffd5\055\uffd5" +
    "\056\uffd5\057\uffd5\060\uffd5\061\uffd5\001\002\000\062\005" +
    "\uffd7\015\uffd7\016\uffd7\020\uffd7\021\uffd7\022\uffd7\032\uffd7" +
    "\033\uffd7\034\uffd7\035\uffd7\037\uffd7\040\uffd7\041\uffd7\042" +
    "\uffd7\043\073\044\072\050\uffd7\053\uffd7\054\uffd7\055\uffd7" +
    "\056\uffd7\057\uffd7\060\uffd7\061\uffd7\001\002\000\056\005" +
    "\uffd8\015\uffd8\016\uffd8\020\uffd8\021\uffd8\022\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\037\uffd8\040\uffd8\041\uffd8\042" +
    "\uffd8\050\uffd8\053\uffd8\054\067\055\064\056\066\057\065" +
    "\060\uffd8\061\uffd8\001\002\000\004\050\107\001\002\000" +
    "\040\005\uffdf\015\uffdf\016\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\032\uffdf\033\uffdf\034\uffdf\035\uffdf\037\uffdf\040\uffdf\041" +
    "\uffdf\050\uffdf\060\052\001\002\000\066\005\uffc9\015\uffc9" +
    "\016\uffc9\020\uffc9\021\uffc9\022\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\035\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9" +
    "\044\uffc9\045\uffc9\046\uffc9\050\uffc9\053\uffc9\054\uffc9\055" +
    "\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\001\002\000\034" +
    "\005\ufff7\015\ufff7\016\ufff7\020\ufff7\021\ufff7\022\ufff7\032" +
    "\ufff7\033\ufff7\034\ufff7\035\ufff7\037\ufff7\040\ufff7\041\ufff7" +
    "\001\002\000\004\042\112\001\002\000\004\010\113\001" +
    "\002\000\004\036\114\001\002\000\004\010\115\001\002" +
    "\000\022\005\031\016\012\020\016\021\022\022\024\032" +
    "\030\035\032\040\035\001\002\000\024\005\031\016\012" +
    "\020\016\021\022\022\024\032\030\035\032\037\117\040" +
    "\035\001\002\000\034\005\uffc5\015\uffc5\016\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\037" +
    "\uffc5\040\uffc5\041\uffc5\001\002\000\012\005\050\010\041" +
    "\011\043\047\037\001\002\000\034\005\uffe0\015\uffe0\016" +
    "\uffe0\020\uffe0\021\uffe0\022\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\037\uffe0\040\uffe0\041\uffe0\001\002\000\024\005" +
    "\031\016\012\020\016\021\022\022\024\032\030\035\032" +
    "\040\035\060\052\001\002\000\026\005\031\016\012\020" +
    "\016\021\022\022\024\032\030\033\124\034\125\035\032" +
    "\040\035\001\002\000\022\005\031\016\012\020\016\021" +
    "\022\022\024\032\030\035\032\040\035\001\002\000\034" +
    "\005\uffc6\015\uffc6\016\uffc6\020\uffc6\021\uffc6\022\uffc6\032" +
    "\uffc6\033\uffc6\034\uffc6\035\uffc6\037\uffc6\040\uffc6\041\uffc6" +
    "\001\002\000\024\005\031\016\012\020\016\021\022\022" +
    "\024\032\030\034\127\035\032\040\035\001\002\000\034" +
    "\005\uffc7\015\uffc7\016\uffc7\020\uffc7\021\uffc7\022\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\037\uffc7\040\uffc7\041\uffc7" +
    "\001\002\000\004\005\144\001\002\000\040\004\uffe4\005" +
    "\uffe4\015\uffe4\016\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\032\uffe4\033\uffe4\034\uffe4\035\uffe4\037\uffe4\040\uffe4\041" +
    "\uffe4\001\002\000\006\004\142\023\141\001\002\000\004" +
    "\005\134\001\002\000\004\051\135\001\002\000\004\010" +
    "\136\001\002\000\004\052\137\001\002\000\004\004\140" +
    "\001\002\000\034\005\uffea\015\uffea\016\uffea\020\uffea\021" +
    "\uffea\022\uffea\032\uffea\033\uffea\034\uffea\035\uffea\037\uffea" +
    "\040\uffea\041\uffea\001\002\000\004\005\143\001\002\000" +
    "\034\005\uffec\015\uffec\016\uffec\020\uffec\021\uffec\022\uffec" +
    "\032\uffec\033\uffec\034\uffec\035\uffec\037\uffec\040\uffec\041" +
    "\uffec\001\002\000\040\004\uffe3\005\uffe3\015\uffe3\016\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\023\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\037\uffe3\040\uffe3\041\uffe3\001\002\000\004" +
    "\051\145\001\002\000\004\010\146\001\002\000\004\052" +
    "\147\001\002\000\004\004\150\001\002\000\034\005\uffeb" +
    "\015\uffeb\016\uffeb\020\uffeb\021\uffeb\022\uffeb\032\uffeb\033" +
    "\uffeb\034\uffeb\035\uffeb\037\uffeb\040\uffeb\041\uffeb\001\002" +
    "\000\034\005\uffe7\015\uffe7\016\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\037\uffe7\040\uffe7" +
    "\041\uffe7\001\002\000\034\005\uffc1\015\uffc1\016\uffc1\020" +
    "\uffc1\021\uffc1\022\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1" +
    "\037\uffc1\040\uffc1\041\uffc1\001\002\000\034\005\uffe6\015" +
    "\uffe6\016\uffe6\020\uffe6\021\uffe6\022\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\037\uffe6\040\uffe6\041\uffe6\001\002\000" +
    "\034\005\uffe5\015\uffe5\016\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\032\uffe5\033\uffe5\034\uffe5\035\uffe5\037\uffe5\040\uffe5\041" +
    "\uffe5\001\002\000\036\005\uffc2\015\uffc2\016\uffc2\020\uffc2" +
    "\021\uffc2\022\uffc2\023\141\032\uffc2\033\uffc2\034\uffc2\035" +
    "\uffc2\037\uffc2\040\uffc2\041\uffc2\001\002\000\034\005\uffe8" +
    "\015\uffe8\016\uffe8\020\uffe8\021\uffe8\022\uffe8\032\uffe8\033" +
    "\uffe8\034\uffe8\035\uffe8\037\uffe8\040\uffe8\041\uffe8\001\002" +
    "\000\006\002\ufffa\024\ufffa\001\002\000\036\005\uffc4\015" +
    "\uffc4\016\uffc4\020\uffc4\021\uffc4\022\uffc4\023\141\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\037\uffc4\040\uffc4\041\uffc4\001" +
    "\002\000\004\017\162\001\002\000\030\002\uffe9\005\uffe9" +
    "\014\uffe9\016\uffe9\020\uffe9\021\uffe9\022\uffe9\024\uffe9\032" +
    "\uffe9\035\uffe9\040\uffe9\001\002\000\004\002\uffff\001\002" +
    "\000\004\005\165\001\002\000\004\025\166\001\002\000" +
    "\004\005\167\001\002\000\004\047\177\001\002\000\006" +
    "\023\ufffd\026\ufffd\001\002\000\006\023\172\026\173\001" +
    "\002\000\004\005\167\001\002\000\004\004\174\001\002" +
    "\000\006\014\013\016\012\001\002\000\004\002\ufffe\001" +
    "\002\000\006\023\ufffc\026\ufffc\001\002\000\004\004\200" +
    "\001\002\000\004\050\201\001\002\000\006\023\ufffb\026" +
    "\ufffb\001\002\000\006\002\ufff9\024\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\010\007\007" +
    "\001\001\000\006\006\201\007\007\001\001\000\004\003" +
    "\162\001\001\000\002\001\001\000\030\007\032\010\020" +
    "\011\013\012\022\013\014\014\033\015\024\016\016\024" +
    "\026\035\017\036\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\007\032\011\053\012\022\013\014" +
    "\014\033\015\024\016\016\024\026\035\017\036\025\001" +
    "\001\000\010\017\151\020\153\021\154\001\001\000\002" +
    "\001\001\000\004\021\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\020\041\023\121" +
    "\025\043\026\035\027\037\030\046\032\044\034\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\007\032" +
    "\011\107\012\022\013\014\014\033\015\024\016\016\024" +
    "\026\035\017\036\025\001\001\000\002\001\001\000\022" +
    "\020\041\023\050\025\043\026\035\027\037\030\046\032" +
    "\044\034\045\001\001\000\002\001\001\000\024\020\041" +
    "\022\104\023\105\025\043\026\035\027\037\030\046\032" +
    "\044\034\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\074\001\001\000\002\001\001\000\004\031\070" +
    "\001\001\000\002\001\001\000\030\007\032\010\052\011" +
    "\013\012\022\013\014\014\033\015\024\016\016\024\026" +
    "\035\017\036\025\001\001\000\020\020\041\025\055\026" +
    "\035\027\037\030\046\032\044\034\045\001\001\000\026" +
    "\007\032\011\053\012\022\013\014\014\033\015\024\016" +
    "\016\024\026\035\017\036\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\020\041\026" +
    "\057\027\037\030\046\032\044\034\045\001\001\000\002" +
    "\001\001\000\014\020\041\027\103\030\046\032\044\034" +
    "\045\001\001\000\014\020\041\027\062\030\046\032\044" +
    "\034\045\001\001\000\002\001\001\000\012\020\041\030" +
    "\102\032\044\034\045\001\001\000\012\020\041\030\101" +
    "\032\044\034\045\001\001\000\012\020\041\030\100\032" +
    "\044\034\045\001\001\000\012\020\041\030\067\032\044" +
    "\034\045\001\001\000\004\031\070\001\001\000\010\020" +
    "\041\032\073\034\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\074\001\001\000\006\020\041\034" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\070\001\001\000\004\031\070\001" +
    "\001\000\004\031\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\007\032\010\115\011\013\012" +
    "\022\013\014\014\033\015\024\016\016\024\026\035\017" +
    "\036\025\001\001\000\026\007\032\011\053\012\022\013" +
    "\014\014\033\015\024\016\016\024\026\035\017\036\025" +
    "\001\001\000\002\001\001\000\024\020\041\022\120\023" +
    "\105\025\043\026\035\027\037\030\046\032\044\034\045" +
    "\001\001\000\002\001\001\000\030\007\032\010\122\011" +
    "\013\012\022\013\014\014\033\015\024\016\016\024\026" +
    "\035\017\036\025\001\001\000\026\007\032\011\053\012" +
    "\022\013\014\014\033\015\024\016\016\024\026\035\017" +
    "\036\025\001\001\000\030\007\032\010\125\011\013\012" +
    "\022\013\014\014\033\015\024\016\016\024\026\035\017" +
    "\036\025\001\001\000\002\001\001\000\026\007\032\011" +
    "\053\012\022\013\014\014\033\015\024\016\016\024\026" +
    "\035\017\036\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\170\005\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\175\001\001" +
    "\000\002\001\001\000\006\006\174\007\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public boolean correcto=true;
	private SintacticoListener listener = null;

	public void addListener(SintacticoListener listener){
		this.listener = listener;
	}

	public void syntax_error(Symbol cur_token){
		correcto = false;
		listener.errorSintaxis(cur_token, symbl_name_from_id(cur_token.sym));
		System.err.println("Error con token: " + symbl_name_from_id(cur_token.sym));
	}

	/* Reporte de error encontrado. */
	public void report_error(String message, Object info) {
	  StringBuilder m = new StringBuilder("Error");
	  if (info instanceof java_cup.runtime.Symbol) {
	      java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
	      if (s.left >= 0) {                
	          m.append(" in line "+(s.left+1));
	          if (s.right >= 0)
	              m.append(", column "+(s.right+1));
	      }
	  }
	  m.append(" : "+message);
	  System.err.println(m);
	  System.err.println(info);
	}

	/* Cuando se encuentra un error de donde el sistema no puede
	  recuperarse, se lanza un error fatal. Se despliega el mensaje
	  de error y se finaliza la ejecucion. */
	public void report_fatal_error(String message, Object info) {
	  report_error(message, info);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= PROGRAMA_K IDENTIFICADOR BLOQUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= PROGRAMA_K IDENTIFICADOR BLOQUE MODULO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MODULO ::= MODULO_K IDENTIFICADOR RECIBE ARGUMENTOS DEVUELVE TIPO BLOQUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MODULO",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ARGUMENTOS ::= ARGUMENTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ARGUMENTOS ::= ARGUMENTOS COMA ARGUMENTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ARGUMENTO ::= IDENTIFICADOR PAR_IZQ TIPO PAR_DER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BLOQUE ::= INICIO_BLOQUE INSTRUCCIONES FIN_BLOQUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BLOQUE ::= COMENTARIO BLOQUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BLOQUE ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= COMENTARIO INSTRUCCION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= IF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= IFELSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= FOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= MIENTRAS_T 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= LECTURA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= DESPLIEGUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= DECLARAR IDENTIFICADORES TIPO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= DECLARAR VECTOR IDENTIFICADOR CORCHETE_IZQ ENTERO CORCHETE_DER TIPO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= DECLARAR MATRIZ IDENTIFICADOR CORCHETE_IZQ ENTERO CORCHETE_DER TIPO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // COMENTARIO ::= INICIO_COMENTARIO CONT_COMENT FIN_COMENTARIO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONSTANTE ::= CARACTER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONSTANTE",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONSTANTE ::= CADENA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONSTANTE",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONSTANTE ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONSTANTE",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONSTANTE ::= CONSTANTE_NUM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONSTANTE",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IDENTIFICADORES ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IDENTIFICADORES ::= IDENTIFICADORES COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONSTANTE_NUM ::= ENTERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONSTANTE_NUM",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONSTANTE_NUM ::= FLOTANTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONSTANTE_NUM",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASIGNACION ::= IDENTIFICADOR OP_IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= CONDICION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONDICION ::= CONDICIONAL_Y 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONDICION ::= CONDICION OR CONDICIONAL_Y 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONDICIONAL_Y ::= EXP_IGUALDAD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_Y",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONDICIONAL_Y ::= CONDICIONAL_Y AND EXP_IGUALDAD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_Y",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP_IGUALDAD ::= EXP_RELACIONAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_IGUALDAD",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP_IGUALDAD ::= EXP_IGUALDAD OP_IGUAL EXP_RELACIONAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_IGUALDAD",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP_IGUALDAD ::= EXP_IGUALDAD COMP_DIFERENTE EXP_RELACIONAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_IGUALDAD",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP_RELACIONAL ::= EXP_RELACIONAL COMP_MENOR EXP_ADICION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP_RELACIONAL ::= EXP_RELACIONAL COMP_MAYOR EXP_ADICION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP_RELACIONAL ::= EXP_RELACIONAL COMP_MENOR_IGUAL EXP_ADICION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP_RELACIONAL ::= EXP_RELACIONAL COMP_MAYOR_IGUAL EXP_ADICION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP_RELACIONAL ::= EXP_ADICION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP_ADICION ::= EXP_MUL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_ADICION",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP_ADICION ::= EXP_ADICION OP_ADICION EXP_MUL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_ADICION",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OP_ADICION ::= OP_MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ADICION",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OP_ADICION ::= OP_MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ADICION",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXP_MUL ::= EXP_PRIMARIA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_MUL",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP_MUL ::= EXP_MUL OP_MUL EXP_PRIMARIA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_MUL",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OP_MUL ::= OP_POR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_MUL",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OP_MUL ::= OP_DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_MUL",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP_PRIMARIA ::= CONSTANTE_NUM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_PRIMARIA",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP_PRIMARIA ::= PAR_IZQ EXPRESION PAR_DER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_PRIMARIA",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP_PRIMARIA ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_PRIMARIA",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IFELSE ::= SI CONDICION INSTRUCCIONES SINO INSTRUCCIONES FIN_SI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IFELSE",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IF ::= SI CONDICION INSTRUCCIONES FIN_SI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IF",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FOR ::= DESDE IDENTIFICADOR OP_IGUAL ENTERO HASTA ENTERO INSTRUCCIONES FIN_DESDE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LECTURA ::= LEER IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LECTURA",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // MIENTRAS_T ::= MIENTRAS CONDICION INSTRUCCIONES FIN_MIENTRAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS_T",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DESPLIEGUE ::= DESPLEGAR IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DESPLIEGUE",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DESPLIEGUE ::= DESPLEGAR CONSTANTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DESPLIEGUE",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
